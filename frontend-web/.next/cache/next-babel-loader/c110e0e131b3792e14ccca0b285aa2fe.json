{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/rcastro/Desktop/dev-ws/cadmetas/frontend-web/pages/cadastrar.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport { Jumbotron } from 'reactstrap';\n\nfunction Cadastrar() {\n  const {\n    0: meta,\n    1: setMeta\n  } = useState({\n    name: '',\n    description: '',\n    status: ''\n  });\n  const {\n    0: response,\n    1: setResponse\n  } = useState({\n    formSave: false,\n    type: '',\n    message: ''\n  }); //pega o que já estava anteriormente preenchido e atualiza. Utiliza o name e o value do input\n\n  const onChangeInput = e => setMeta(_objectSpread(_objectSpread({}, meta), {}, {\n    [e.target.name]: e.target.value\n  }));\n\n  const sendMeta = async e => {\n    e.preventDefault();\n    setResponse({\n      formSave: true\n    });\n\n    try {\n      const res = await fetch('http://localhost:8080/metas', {\n        method: 'POST',\n        body: JSON.stringify(meta),\n        headers: {\n          'Content-type': 'application/json'\n        }\n      });\n      const responseEnv = await res.json();\n\n      if (responseEnv.error) {\n        setResponse({\n          formSave: false,\n          type: 'error',\n          message: responseEnv.message\n        });\n      } else {\n        setResponse({\n          formSave: false,\n          type: 'success',\n          message: responseEnv.message\n        });\n      }\n    } catch (err) {\n      setResponse({\n        formSave: false,\n        type: 'error',\n        message: 'ERROR - Não foi possível conectar a API. Meta não cadastrada!'\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Jumbotron, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Cadastrar Meta\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: sendMeta,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Nome: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"name\",\n          id: \"name\",\n          placeholder: \"Nome da meta\",\n          onChange: onChangeInput\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 22\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Descri\\xE7\\xE3o: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"description\",\n          id: \"description\",\n          placeholder: \"Descri\\xE7\\xE3o da meta\",\n          onChange: onChangeInput\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 22\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Status: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"status\",\n          id: \"status\",\n          placeholder: \"Status da meta\",\n          onChange: onChangeInput\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 22\n        }, this), response.formSave ? /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          disabled: true,\n          children: \"Enviando...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 37\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Cadastrar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 91\n        }, this), response.type === 'error' ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: response.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 45\n        }, this) : \"\", response.type === 'success' ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: response.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 47\n        }, this) : \"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 10\n    }, this)\n  }, void 0, false);\n}\n\nexport default Cadastrar;","map":{"version":3,"sources":["/Users/rcastro/Desktop/dev-ws/cadmetas/frontend-web/pages/cadastrar.js"],"names":["React","useState","Jumbotron","Cadastrar","meta","setMeta","name","description","status","response","setResponse","formSave","type","message","onChangeInput","e","target","value","sendMeta","preventDefault","res","fetch","method","body","JSON","stringify","headers","responseEnv","json","error","err"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { Jumbotron } from 'reactstrap'\n\nfunction Cadastrar() {\n\n   const [meta, setMeta] = useState({\n      name: '',\n      description: '',\n      status: ''\n   })\n\n   const [response, setResponse] = useState({\n      formSave: false,\n      type: '',\n      message: ''\n   })\n\n   //pega o que já estava anteriormente preenchido e atualiza. Utiliza o name e o value do input\n   const onChangeInput = e => setMeta({ ...meta, [e.target.name]: e.target.value })\n\n   const sendMeta = async e => {\n      e.preventDefault()\n\n      setResponse({ formSave: true })\n\n      try {\n         const res = await fetch('http://localhost:8080/metas', {\n            method: 'POST',\n            body: JSON.stringify(meta),\n            headers: {\n               'Content-type': 'application/json'\n            }\n         })\n\n         const responseEnv = await res.json()\n\n         if (responseEnv.error) {\n            setResponse({\n               formSave: false,\n               type: 'error',\n               message: responseEnv.message\n            })\n         } else {\n            setResponse({\n               formSave: false,\n               type: 'success',\n               message: responseEnv.message\n            })\n         }\n      } catch (err) {\n         setResponse({\n            formSave: false,\n            type: 'error',\n            message: 'ERROR - Não foi possível conectar a API. Meta não cadastrada!'\n         })\n      }\n   }\n\n   return (\n      <>\n         <Jumbotron >\n            <h1>Cadastrar Meta</h1>\n            <hr />\n            <form onSubmit={sendMeta}>\n               <label>Nome: </label>\n               <input\n                  type=\"text\"\n                  name=\"name\"\n                  id=\"name\"\n                  placeholder=\"Nome da meta\"\n                  onChange={onChangeInput}\n               />\n               <br /><br />\n               <label>Descrição: </label>\n               <input\n                  type=\"text\"\n                  name=\"description\"\n                  id=\"description\"\n                  placeholder=\"Descrição da meta\"\n                  onChange={onChangeInput}\n               />\n               <br /><br />\n               <label>Status: </label>\n               <input\n                  type=\"text\"\n                  name=\"status\"\n                  id=\"status\"\n                  placeholder=\"Status da meta\"\n                  onChange={onChangeInput}\n               />\n               <br /><br />\n               {/* bloqueando o botão até que a API responda. Para evitar reenvios do formulário em caso de demora na resposata */}\n               {response.formSave ? <button type=\"submit\" disabled>Enviando...</button> : <button type=\"submit\">Cadastrar</button>}\n\n               {/* mensagens de sucesso ou de erro o gravar a meta */}\n               {response.type === 'error' ? <p>{response.message}</p> : \"\"}\n               {response.type === 'success' ? <p>{response.message}</p> : \"\"}\n\n            </form>\n         </Jumbotron>\n      </>\n   )\n}\n\nexport default Cadastrar"]},"metadata":{},"sourceType":"module"}