{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/rcastro/Desktop/dev-ws/cadmetas/frontend-web/pages/cadastrar.js\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport { Jumbotron, Container, Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\n\nfunction Cadastrar() {\n  _s();\n\n  var _useState = useState({\n    name: '',\n    description: '',\n    status: ''\n  }),\n      meta = _useState[0],\n      setMeta = _useState[1];\n\n  var _useState2 = useState({\n    formSave: false,\n    type: '',\n    message: ''\n  }),\n      response = _useState2[0],\n      setResponse = _useState2[1]; //pega o que já estava anteriormente preenchido e atualiza. Utiliza o name e o value do input\n\n\n  var onChangeInput = function onChangeInput(e) {\n    return setMeta(_objectSpread(_objectSpread({}, meta), {}, _defineProperty({}, e.target.name, e.target.value)));\n  };\n\n  var sendMeta = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      var res, responseEnv;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault();\n              setResponse({\n                formSave: true\n              });\n              _context.prev = 2;\n              _context.next = 5;\n              return fetch('http://localhost:8080/metas', {\n                method: 'POST',\n                body: JSON.stringify(meta),\n                headers: {\n                  'Content-type': 'application/json'\n                }\n              });\n\n            case 5:\n              res = _context.sent;\n              _context.next = 8;\n              return res.json();\n\n            case 8:\n              responseEnv = _context.sent;\n\n              if (responseEnv.error) {\n                setResponse({\n                  formSave: false,\n                  type: 'error',\n                  message: responseEnv.message\n                });\n              } else {\n                setResponse({\n                  formSave: false,\n                  type: 'success',\n                  message: responseEnv.message\n                });\n              }\n\n              _context.next = 15;\n              break;\n\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](2);\n              setResponse({\n                formSave: false,\n                type: 'error',\n                message: 'ERROR - Não foi possível conectar a API. Meta não cadastrada!'\n              });\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[2, 12]]);\n    }));\n\n    return function sendMeta(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Jumbotron, {\n      fluid: true,\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"style\", {\n        children: \".form{\\n                  padding-top: 30px;\\n                  padding-bottom: 150px;\\n                  margin-bottom: 0 !important;\\n               }\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"display-4 text-center\",\n          children: \"Cadastrar Meta\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: sendMeta,\n          children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n            children: [/*#__PURE__*/_jsxDEV(Label, {\n              \"for\": \"name\",\n              children: \"Nome\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 22\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              type: \"text\",\n              name: \"name\",\n              id: \"name\",\n              placeholder: \"Nome da meta\",\n              onChange: onChangeInput\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 22\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n            children: [/*#__PURE__*/_jsxDEV(Label, {\n              \"for\": \"description\",\n              children: \"Descri\\xE7\\xE3o\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 22\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              type: \"text\",\n              name: \"description\",\n              id: \"description\",\n              placeholder: \"Descri\\xE7\\xE3o da meta\",\n              onChange: onChangeInput\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 22\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Descri\\xE7\\xE3o: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"description\",\n            id: \"description\",\n            placeholder: \"Descri\\xE7\\xE3o da meta\",\n            onChange: onChangeInput\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Status: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"status\",\n            id: \"status\",\n            placeholder: \"Status da meta\",\n            onChange: onChangeInput\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 25\n          }, this), response.formSave ? /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            disabled: true,\n            children: \"Enviando...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 40\n          }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Cadastrar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 94\n          }, this), response.type === 'error' ? /*#__PURE__*/_jsxDEV(\"p\", {\n            children: response.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 48\n          }, this) : \"\", response.type === 'success' ? /*#__PURE__*/_jsxDEV(\"p\", {\n            children: response.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 50\n          }, this) : \"\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 16\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 10\n    }, this)\n  }, void 0, false);\n}\n\n_s(Cadastrar, \"VpwOP5msJI17cxyrUdjxrriyV0M=\");\n\n_c = Cadastrar;\nexport default Cadastrar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cadastrar\");","map":{"version":3,"sources":["/Users/rcastro/Desktop/dev-ws/cadmetas/frontend-web/pages/cadastrar.js"],"names":["React","useState","Jumbotron","Container","Button","Form","FormGroup","Label","Input","FormText","Cadastrar","name","description","status","meta","setMeta","formSave","type","message","response","setResponse","onChangeInput","e","target","value","sendMeta","preventDefault","fetch","method","body","JSON","stringify","headers","res","json","responseEnv","error"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { Jumbotron, Container, Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap'\n\nfunction Cadastrar() {\n\n   const [meta, setMeta] = useState({\n      name: '',\n      description: '',\n      status: ''\n   })\n\n   const [response, setResponse] = useState({\n      formSave: false,\n      type: '',\n      message: ''\n   })\n\n   //pega o que já estava anteriormente preenchido e atualiza. Utiliza o name e o value do input\n   const onChangeInput = e => setMeta({ ...meta, [e.target.name]: e.target.value })\n\n   const sendMeta = async e => {\n      e.preventDefault()\n\n      setResponse({ formSave: true })\n\n      try {\n         const res = await fetch('http://localhost:8080/metas', {\n            method: 'POST',\n            body: JSON.stringify(meta),\n            headers: {\n               'Content-type': 'application/json'\n            }\n         })\n\n         const responseEnv = await res.json()\n\n         if (responseEnv.error) {\n            setResponse({\n               formSave: false,\n               type: 'error',\n               message: responseEnv.message\n            })\n         } else {\n            setResponse({\n               formSave: false,\n               type: 'success',\n               message: responseEnv.message\n            })\n         }\n      } catch (err) {\n         setResponse({\n            formSave: false,\n            type: 'error',\n            message: 'ERROR - Não foi possível conectar a API. Meta não cadastrada!'\n         })\n      }\n   }\n\n   return (\n      <>\n         <Jumbotron fluid className=\"form\">\n            <style >\n               {`.form{\n                  padding-top: 30px;\n                  padding-bottom: 150px;\n                  margin-bottom: 0 !important;\n               }`}\n            </style>\n            <Container>\n               <h1 className=\"display-4 text-center\">Cadastrar Meta</h1>\n               <hr />\n               <Form onSubmit={sendMeta}>\n                  <FormGroup>\n                     <Label for=\"name\">Nome</Label>\n                     <Input \n                        type=\"text\" \n                        name=\"name\"\n                        id=\"name\"\n                        placeholder=\"Nome da meta\"\n                        onChange={onChangeInput}>\n                     </Input> \n                  </FormGroup>\n                  <br /><br />\n                  <FormGroup>\n                     <Label for=\"description\">Descrição</Label>\n                     <Input \n                        type=\"text\" \n                        name=\"description\"\n                        id=\"description\"\n                        placeholder=\"Descrição da meta\"\n                        onChange={onChangeInput}>\n                     </Input> \n                  </FormGroup>\n\n\n\n                  <label>Descrição: </label>\n                  <input\n                     type=\"text\"\n                     name=\"description\"\n                     id=\"description\"\n                     placeholder=\"Descrição da meta\"\n                     onChange={onChangeInput}\n                  />\n                  <br /><br />\n                  <label>Status: </label>\n                  <input\n                     type=\"text\"\n                     name=\"status\"\n                     id=\"status\"\n                     placeholder=\"Status da meta\"\n                     onChange={onChangeInput}\n                  />\n                  <br /><br />\n                  {/* bloqueando o botão até que a API responda. Para evitar reenvios do formulário em caso de demora na resposata */}\n                  {response.formSave ? <button type=\"submit\" disabled>Enviando...</button> : <button type=\"submit\">Cadastrar</button>}\n\n                  {/* mensagens de sucesso ou de erro o gravar a meta */}\n                  {response.type === 'error' ? <p>{response.message}</p> : \"\"}\n                  {response.type === 'success' ? <p>{response.message}</p> : \"\"}\n\n                  </Form>\n            </Container>\n         </Jumbotron>\n      </>\n   )\n}\n\nexport default Cadastrar"]},"metadata":{},"sourceType":"module"}