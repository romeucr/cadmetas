{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/rcastro/Desktop/dev-ws/cadmetas/frontend-web/pages/cadastrar.js\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\n\nfunction Cadastrar() {\n  _s();\n\n  var _useState = useState({\n    name: '',\n    description: '',\n    status: ''\n  }),\n      meta = _useState[0],\n      setMeta = _useState[1];\n\n  var _useState2 = useState({\n    formSave: false,\n    type: '',\n    message: ''\n  }),\n      response = _useState2[0],\n      setResponse = _useState2[1]; //pega o que já estava anteriormente preenchido e atualiza. Utiliza o name e o value do input\n\n\n  var onChangeInput = function onChangeInput(e) {\n    return setMeta(_objectSpread(_objectSpread({}, meta), {}, _defineProperty({}, e.target.name, e.target.value)));\n  };\n\n  var sendMeta = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      var res, responseEnv;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault();\n              _context.prev = 1;\n              _context.next = 4;\n              return fetch('http://localhost:8080/metas', {\n                method: 'POST',\n                body: JSON.stringify(meta),\n                headers: {\n                  'Content-type': 'application/json'\n                }\n              });\n\n            case 4:\n              res = _context.sent;\n              _context.next = 7;\n              return res.json();\n\n            case 7:\n              responseEnv = _context.sent;\n\n              if (responseEnv.error) {\n                setResponse({\n                  formSave: false,\n                  type: 'error',\n                  message: responseEnv.message\n                });\n              } else {\n                setResponse({\n                  formSave: true,\n                  type: 'success',\n                  message: responseEnv.message\n                });\n              }\n\n              _context.next = 14;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](1);\n              setResponse({\n                formSave: false,\n                type: 'error',\n                message: 'ERROR - Não foi possível conectar a API. Meta não cadastrada!'\n              });\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 11]]);\n    }));\n\n    return function sendMeta(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Cadastrar Meta\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: sendMeta,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Nome: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"name\",\n        id: \"name\",\n        placeholder: \"Nome da meta\",\n        onChange: onChangeInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Descri\\xE7\\xE3o: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"description\",\n        id: \"description\",\n        placeholder: \"Descri\\xE7\\xE3o da meta\",\n        onChange: onChangeInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Status: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"status\",\n        id: \"status\",\n        placeholder: \"Status da meta\",\n        onChange: onChangeInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Cadastrar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }, this), response.type === 'error' ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: response.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 42\n      }, this) : \"\", response.type === 'success' ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: response.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 44\n      }, this) : \"\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Cadastrar, \"VpwOP5msJI17cxyrUdjxrriyV0M=\");\n\n_c = Cadastrar;\nexport default Cadastrar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cadastrar\");","map":{"version":3,"sources":["/Users/rcastro/Desktop/dev-ws/cadmetas/frontend-web/pages/cadastrar.js"],"names":["React","useState","Cadastrar","name","description","status","meta","setMeta","formSave","type","message","response","setResponse","onChangeInput","e","target","value","sendMeta","preventDefault","fetch","method","body","JSON","stringify","headers","res","json","responseEnv","error"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\n\nfunction Cadastrar() {\n\n   const [meta, setMeta] = useState({\n      name: '',\n      description: '',\n      status: ''\n   })\n\n   const [response, setResponse] = useState({\n      formSave: false,\n      type: '',\n      message: ''\n   })\n\n   //pega o que já estava anteriormente preenchido e atualiza. Utiliza o name e o value do input\n   const onChangeInput = e => setMeta({ ...meta, [e.target.name]: e.target.value })\n\n   const sendMeta = async e => {\n      e.preventDefault()\n\n      try {\n         const res = await fetch('http://localhost:8080/metas', {\n            method: 'POST',\n            body: JSON.stringify(meta),\n            headers: {\n               'Content-type': 'application/json'\n            }\n         })\n\n         const responseEnv = await res.json()\n\n         if (responseEnv.error) {\n            setResponse({\n               formSave: false,\n               type: 'error',\n               message: responseEnv.message\n            })\n         } else {\n            setResponse({\n               formSave: true,\n               type: 'success',\n               message: responseEnv.message\n            })\n         }\n      } catch (err) {\n         setResponse({\n            formSave: false,\n            type: 'error',\n            message: 'ERROR - Não foi possível conectar a API. Meta não cadastrada!'\n         })\n      }\n   }\n\n   return (\n      <>\n         <h1>Cadastrar Meta</h1>\n         <hr />\n         <form onSubmit={sendMeta}>\n            <label>Nome: </label>\n            <input\n               type=\"text\"\n               name=\"name\"\n               id=\"name\"\n               placeholder=\"Nome da meta\"\n               onChange={onChangeInput}\n            />\n            <br /><br />\n            <label>Descrição: </label>\n            <input\n               type=\"text\"\n               name=\"description\"\n               id=\"description\"\n               placeholder=\"Descrição da meta\"\n               onChange={onChangeInput}\n            />\n            <br /><br />\n            <label>Status: </label>\n            <input\n               type=\"text\"\n               name=\"status\"\n               id=\"status\"\n               placeholder=\"Status da meta\"\n               onChange={onChangeInput}\n            />\n            <br /><br />\n            <button type=\"submit\">Cadastrar</button>\n            {response.type === 'error' ? <p>{response.message}</p> : \"\" }\n            {response.type === 'success' ? <p>{response.message}</p> : \"\" }\n         </form>\n      </>\n   )\n}\n\nexport default Cadastrar"]},"metadata":{},"sourceType":"module"}