{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/rcastro/Desktop/dev-ws/cadmetas/frontend-web/pages/cadastrar.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport { Jumbotron, Container, Button, Form, FormGroup, Label, Input } from 'reactstrap';\n\nfunction Cadastrar() {\n  const {\n    0: meta,\n    1: setMeta\n  } = useState({\n    name: '',\n    description: '',\n    status: ''\n  });\n  const {\n    0: response,\n    1: setResponse\n  } = useState({\n    formSave: false,\n    type: '',\n    message: ''\n  }); //pega o que já estava anteriormente preenchido e atualiza. Utiliza o name e o value do input\n\n  const onChangeInput = e => setMeta(_objectSpread(_objectSpread({}, meta), {}, {\n    [e.target.name]: e.target.value\n  }));\n\n  const sendMeta = async e => {\n    e.preventDefault();\n    setResponse({\n      formSave: true\n    });\n\n    try {\n      const res = await fetch('http://localhost:8080/metas', {\n        method: 'POST',\n        body: JSON.stringify(meta),\n        headers: {\n          'Content-type': 'application/json'\n        }\n      });\n      const responseEnv = await res.json();\n\n      if (responseEnv.error) {\n        setResponse({\n          formSave: false,\n          type: 'error',\n          message: responseEnv.message\n        });\n      } else {\n        setResponse({\n          formSave: false,\n          type: 'success',\n          message: responseEnv.message\n        });\n      }\n    } catch (err) {\n      setResponse({\n        formSave: false,\n        type: 'error',\n        message: 'ERROR - Não foi possível conectar a API. Meta não cadastrada!'\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Jumbotron, {\n      fluid: true,\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"style\", {\n        children: `.form{\n                  padding-top: 30px;\n                  padding-bottom: 150px;\n                  margin-bottom: 0 !important;\n               }`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"display-4 text-center\",\n          children: \"Cadastrar Meta\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: sendMeta,\n          children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n            children: [/*#__PURE__*/_jsxDEV(Label, {\n              for: \"name\",\n              children: \"Nome\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 22\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              type: \"text\",\n              name: \"name\",\n              id: \"name\",\n              placeholder: \"Nome da meta\",\n              onChange: onChangeInput\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 22\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n            children: [/*#__PURE__*/_jsxDEV(Label, {\n              for: \"description\",\n              children: \"Descri\\xE7\\xE3o\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 22\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              type: \"textarea\",\n              name: \"description\",\n              id: \"description\",\n              placeholder: \"Descri\\xE7\\xE3o da meta\",\n              onChange: onChangeInput\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 22\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n            children: [/*#__PURE__*/_jsxDEV(Label, {\n              for: \"status\",\n              children: \"Status\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 22\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              type: \"select\",\n              name: \"status\",\n              id: \"status\",\n              placeholder: \"Status da meta\",\n              onChange: onChangeInput,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"Pendente\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"Cancelada\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"Conclu\\xEDda\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 104,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"Em andamento\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 105,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 22\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 19\n          }, this), response.formSave ? /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            disabled: true,\n            children: \"Enviando...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 40\n          }, this) : /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            children: \"Cadastrar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 94\n          }, this), response.type === 'error' ? /*#__PURE__*/_jsxDEV(\"span\", {\n            children: response.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 48\n          }, this) : \"\", response.type === 'success' ? /*#__PURE__*/_jsxDEV(\"span\", {\n            children: response.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 50\n          }, this) : \"\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 16\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 10\n    }, this)\n  }, void 0, false);\n}\n\nexport default Cadastrar;","map":{"version":3,"sources":["/Users/rcastro/Desktop/dev-ws/cadmetas/frontend-web/pages/cadastrar.js"],"names":["React","useState","Jumbotron","Container","Button","Form","FormGroup","Label","Input","Cadastrar","meta","setMeta","name","description","status","response","setResponse","formSave","type","message","onChangeInput","e","target","value","sendMeta","preventDefault","res","fetch","method","body","JSON","stringify","headers","responseEnv","json","error","err"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,SAAT,EAAoBC,SAApB,EAA+BC,MAA/B,EAAuCC,IAAvC,EAA6CC,SAA7C,EAAwDC,KAAxD,EAA+DC,KAA/D,QAA4E,YAA5E;;AAEA,SAASC,SAAT,GAAqB;AAElB,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBV,QAAQ,CAAC;AAC9BW,IAAAA,IAAI,EAAE,EADwB;AAE9BC,IAAAA,WAAW,EAAE,EAFiB;AAG9BC,IAAAA,MAAM,EAAE;AAHsB,GAAD,CAAhC;AAMA,QAAM;AAAA,OAACC,QAAD;AAAA,OAAWC;AAAX,MAA0Bf,QAAQ,CAAC;AACtCgB,IAAAA,QAAQ,EAAE,KAD4B;AAEtCC,IAAAA,IAAI,EAAE,EAFgC;AAGtCC,IAAAA,OAAO,EAAE;AAH6B,GAAD,CAAxC,CARkB,CAclB;;AACA,QAAMC,aAAa,GAAGC,CAAC,IAAIV,OAAO,iCAAMD,IAAN;AAAY,KAACW,CAAC,CAACC,MAAF,CAASV,IAAV,GAAiBS,CAAC,CAACC,MAAF,CAASC;AAAtC,KAAlC;;AAEA,QAAMC,QAAQ,GAAG,MAAMH,CAAN,IAAW;AACzBA,IAAAA,CAAC,CAACI,cAAF;AAEAT,IAAAA,WAAW,CAAC;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAAD,CAAX;;AAEA,QAAI;AACD,YAAMS,GAAG,GAAG,MAAMC,KAAK,CAAC,6BAAD,EAAgC;AACpDC,QAAAA,MAAM,EAAE,MAD4C;AAEpDC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAerB,IAAf,CAF8C;AAGpDsB,QAAAA,OAAO,EAAE;AACN,0BAAgB;AADV;AAH2C,OAAhC,CAAvB;AAQA,YAAMC,WAAW,GAAG,MAAMP,GAAG,CAACQ,IAAJ,EAA1B;;AAEA,UAAID,WAAW,CAACE,KAAhB,EAAuB;AACpBnB,QAAAA,WAAW,CAAC;AACTC,UAAAA,QAAQ,EAAE,KADD;AAETC,UAAAA,IAAI,EAAE,OAFG;AAGTC,UAAAA,OAAO,EAAEc,WAAW,CAACd;AAHZ,SAAD,CAAX;AAKF,OAND,MAMO;AACJH,QAAAA,WAAW,CAAC;AACTC,UAAAA,QAAQ,EAAE,KADD;AAETC,UAAAA,IAAI,EAAE,SAFG;AAGTC,UAAAA,OAAO,EAAEc,WAAW,CAACd;AAHZ,SAAD,CAAX;AAKF;AACH,KAxBD,CAwBE,OAAOiB,GAAP,EAAY;AACXpB,MAAAA,WAAW,CAAC;AACTC,QAAAA,QAAQ,EAAE,KADD;AAETC,QAAAA,IAAI,EAAE,OAFG;AAGTC,QAAAA,OAAO,EAAE;AAHA,OAAD,CAAX;AAKF;AACH,GApCD;;AAsCA,sBACG;AAAA,2BACG,QAAC,SAAD;AAAW,MAAA,KAAK,MAAhB;AAAiB,MAAA,SAAS,EAAC,MAA3B;AAAA,8BACG;AAAA,kBACK;AACjB;AACA;AACA;AACA;AALY;AAAA;AAAA;AAAA;AAAA,cADH,eAQG,QAAC,SAAD;AAAA,gCACG;AAAI,UAAA,SAAS,EAAC,uBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADH,eAEG;AAAA;AAAA;AAAA;AAAA,gBAFH,eAGG,QAAC,IAAD;AAAM,UAAA,QAAQ,EAAEK,QAAhB;AAAA,kCACG,QAAC,SAAD;AAAA,oCACG,QAAC,KAAD;AAAO,cAAA,GAAG,EAAC,MAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADH,eAEG,QAAC,KAAD;AACG,cAAA,IAAI,EAAC,MADR;AAEG,cAAA,IAAI,EAAC,MAFR;AAGG,cAAA,EAAE,EAAC,MAHN;AAIG,cAAA,WAAW,EAAC,cAJf;AAKG,cAAA,QAAQ,EAAEJ;AALb;AAAA;AAAA;AAAA;AAAA,oBAFH;AAAA;AAAA;AAAA;AAAA;AAAA,kBADH,eAWG,QAAC,SAAD;AAAA,oCACG,QAAC,KAAD;AAAO,cAAA,GAAG,EAAC,aAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADH,eAEG,QAAC,KAAD;AACG,cAAA,IAAI,EAAC,UADR;AAEG,cAAA,IAAI,EAAC,aAFR;AAGG,cAAA,EAAE,EAAC,aAHN;AAIG,cAAA,WAAW,EAAC,yBAJf;AAKG,cAAA,QAAQ,EAAEA;AALb;AAAA;AAAA;AAAA;AAAA,oBAFH;AAAA;AAAA;AAAA;AAAA;AAAA,kBAXH,eAqBG,QAAC,SAAD;AAAA,oCACG,QAAC,KAAD;AAAO,cAAA,GAAG,EAAC,QAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADH,eAEG,QAAC,KAAD;AACG,cAAA,IAAI,EAAC,QADR;AAEG,cAAA,IAAI,EAAC,QAFR;AAGG,cAAA,EAAE,EAAC,QAHN;AAIG,cAAA,WAAW,EAAC,gBAJf;AAKG,cAAA,QAAQ,EAAEA,aALb;AAAA,sCAOG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAPH,eAQG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBARH,eASG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBATH,eAUG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAVH;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFH;AAAA;AAAA;AAAA;AAAA;AAAA,kBArBH,EAqCIL,QAAQ,CAACE,QAAT,gBAAoB,QAAC,MAAD;AAAQ,YAAA,IAAI,EAAC,QAAb;AAAsB,YAAA,QAAQ,MAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAApB,gBAA0E,QAAC,MAAD;AAAQ,YAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBArC9E,EAwCIF,QAAQ,CAACG,IAAT,KAAkB,OAAlB,gBAA4B;AAAA,sBAAOH,QAAQ,CAACI;AAAhB;AAAA;AAAA;AAAA;AAAA,kBAA5B,GAA8D,EAxClE,EAyCIJ,QAAQ,CAACG,IAAT,KAAkB,SAAlB,gBAA8B;AAAA,sBAAOH,QAAQ,CAACI;AAAhB;AAAA;AAAA;AAAA;AAAA,kBAA9B,GAAgE,EAzCpE;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHH;AAAA;AAAA;AAAA;AAAA;AAAA,cARH;AAAA;AAAA;AAAA;AAAA;AAAA;AADH,mBADH;AA6DF;;AAED,eAAeV,SAAf","sourcesContent":["import React, { useState } from 'react'\nimport { Jumbotron, Container, Button, Form, FormGroup, Label, Input } from 'reactstrap'\n\nfunction Cadastrar() {\n\n   const [meta, setMeta] = useState({\n      name: '',\n      description: '',\n      status: ''\n   })\n\n   const [response, setResponse] = useState({\n      formSave: false,\n      type: '',\n      message: ''\n   })\n\n   //pega o que já estava anteriormente preenchido e atualiza. Utiliza o name e o value do input\n   const onChangeInput = e => setMeta({ ...meta, [e.target.name]: e.target.value })\n\n   const sendMeta = async e => {\n      e.preventDefault()\n\n      setResponse({ formSave: true })\n\n      try {\n         const res = await fetch('http://localhost:8080/metas', {\n            method: 'POST',\n            body: JSON.stringify(meta),\n            headers: {\n               'Content-type': 'application/json'\n            }\n         })\n\n         const responseEnv = await res.json()\n\n         if (responseEnv.error) {\n            setResponse({\n               formSave: false,\n               type: 'error',\n               message: responseEnv.message\n            })\n         } else {\n            setResponse({\n               formSave: false,\n               type: 'success',\n               message: responseEnv.message\n            })\n         }\n      } catch (err) {\n         setResponse({\n            formSave: false,\n            type: 'error',\n            message: 'ERROR - Não foi possível conectar a API. Meta não cadastrada!'\n         })\n      }\n   }\n\n   return (\n      <>\n         <Jumbotron fluid className=\"form\">\n            <style >\n               {`.form{\n                  padding-top: 30px;\n                  padding-bottom: 150px;\n                  margin-bottom: 0 !important;\n               }`}\n            </style>\n            <Container>\n               <h1 className=\"display-4 text-center\">Cadastrar Meta</h1>\n               <hr />\n               <Form onSubmit={sendMeta}>\n                  <FormGroup>\n                     <Label for=\"name\">Nome</Label>\n                     <Input\n                        type=\"text\"\n                        name=\"name\"\n                        id=\"name\"\n                        placeholder=\"Nome da meta\"\n                        onChange={onChangeInput}>\n                     </Input>\n                  </FormGroup>\n                  <FormGroup>\n                     <Label for=\"description\">Descrição</Label>\n                     <Input\n                        type=\"textarea\"\n                        name=\"description\"\n                        id=\"description\"\n                        placeholder=\"Descrição da meta\"\n                        onChange={onChangeInput}>\n                     </Input>\n                  </FormGroup>\n                  <FormGroup>\n                     <Label for=\"status\">Status</Label>\n                     <Input\n                        type=\"select\"\n                        name=\"status\"\n                        id=\"status\"\n                        placeholder=\"Status da meta\"\n                        onChange={onChangeInput}\n                     >\n                        <option>Pendente</option>\n                        <option>Cancelada</option>\n                        <option>Concluída</option>\n                        <option>Em andamento</option>\n                     </Input>\n                  </FormGroup>\n                  {/* bloqueando o botão até que a API responda. Para evitar reenvios do formulário em caso de demora na resposata */}\n                  {response.formSave ? <Button type=\"submit\" disabled>Enviando...</Button> : <Button type=\"submit\">Cadastrar</Button>}\n\n                  {/* mensagens de sucesso ou de erro o gravar a meta */}\n                  {response.type === 'error' ? <span>{response.message}</span> : \"\"}\n                  {response.type === 'success' ? <span>{response.message}</span> : \"\"}\n\n               </Form>\n            </Container>\n         </Jumbotron>\n      </>\n   )\n}\n\nexport default Cadastrar"]},"metadata":{},"sourceType":"module"}